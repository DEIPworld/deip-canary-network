//! Autogenerated weights for pallet_deip_f_nft
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/appchain-deip
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_deip_f_nft
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --output=./pallets/deip_f_nft/src/weights.rs
// --template=./pallets/deip_f_nft/.weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_deip_f_nft.
pub trait WeightInfo {
	fn create() -> Weight;
	fn create_token_asset() -> Weight;
	fn mint_token_asset() -> Weight;
	fn fractionalize() -> Weight;
	fn fuse() -> Weight;
	fn burn_token_asset() -> Weight;
	fn release_token_asset() -> Weight;
	fn destroy() -> Weight;
	fn transfer() -> Weight;
}

/// Weights for pallet_deip_f_nft using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Uniques LockedAsset (r:0 w:1)
	fn create() -> Weight {
		(29_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets LockedAsset (r:0 w:1)
	// Storage: DeipFNft NftClassInstanceToFtAssetId (r:0 w:1)
	fn create_token_asset() -> Weight {
		(24_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	fn mint_token_asset() -> Weight {
		(39_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: Assets Asset (r:1 w:0)
	fn fractionalize() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Account (r:1 w:0)
	// Storage: Assets Asset (r:1 w:0)
	// Storage: Assets LockedAsset (r:0 w:1)
	fn fuse() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	fn burn_token_asset() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:0)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: DeipFNft NftClassInstanceToFtAssetId (r:0 w:1)
	fn release_token_asset() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Uniques LockedAsset (r:1 w:1)
	fn destroy() -> Weight {
		(29_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques LockedAsset (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	fn transfer() -> Weight {
		(54_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Uniques LockedAsset (r:0 w:1)
	fn create() -> Weight {
		(29_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets LockedAsset (r:0 w:1)
	// Storage: DeipFNft NftClassInstanceToFtAssetId (r:0 w:1)
	fn create_token_asset() -> Weight {
		(24_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	fn mint_token_asset() -> Weight {
		(39_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: Assets Asset (r:1 w:0)
	fn fractionalize() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Account (r:1 w:0)
	// Storage: Assets Asset (r:1 w:0)
	// Storage: Assets LockedAsset (r:0 w:1)
	fn fuse() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	fn burn_token_asset() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Assets Asset (r:1 w:0)
	// Storage: Assets LockedAsset (r:1 w:1)
	// Storage: DeipFNft NftClassInstanceToFtAssetId (r:0 w:1)
	fn release_token_asset() -> Weight {
		(20_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Uniques LockedAsset (r:1 w:1)
	fn destroy() -> Weight {
		(29_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: DeipFNft FNft (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques LockedAsset (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	fn transfer() -> Weight {
		(54_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
}
